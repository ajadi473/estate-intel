{
    "openapi": "3.0.0",
    "info": {
        "title": "Laravel OpenApi Demo Documentation",
        "description": "L5 Swagger OpenApi description",
        "contact": {
            "email": "admin@admin.com"
        },
        "license": {
            "name": "Apache 2.0",
            "url": "http://www.apache.org/licenses/LICENSE-2.0.html"
        },
        "version": "1.0.0"
    },
    "servers": [
        {
            "url": "http://127.0.0.1:8000/api/",
            "description": "Demo API Server"
        }
    ],
    "tags": [
        {
            "name": "Books",
            "description": "API Endpoints of all locally stored books"
        },
        {
            "name": "External Books",
            "description": "External API Endpoints"
        }
    ],
    "paths": {
        "/v1/all-books": {
            "post": {
                "tags": [
                    "Books"
                ],
                "summary": "Get list of all books",
                "description": "Returns list of all books",
                "operationId": "getBooksList",
                "responses": {
                    "200": {
                        "description": "Successful operation",
                        "content": {
                            "application/json": {}
                        }
                    },
                    "401": {
                        "description": "Unauthenticated"
                    },
                    "403": {
                        "description": "Forbidden"
                    },
                    "400": {
                        "description": "Bad Request"
                    },
                    "404": {
                        "description": "not found"
                    }
                },
                "security": [
                    {
                        "passport": []
                    }
                ]
            }
        },
        "/v1/trade/all": {
            "get": {
                "tags": [
                    "Books"
                ],
                "summary": "Get list of all available trades",
                "description": "Returns list of all trades",
                "operationId": "getTradesList",
                "responses": {
                    "200": {
                        "description": "Successful operation",
                        "content": {
                            "application/json": {}
                        }
                    },
                    "401": {
                        "description": "Unauthenticated"
                    },
                    "403": {
                        "description": "Forbidden"
                    },
                    "400": {
                        "description": "Bad Request"
                    },
                    "404": {
                        "description": "not found"
                    }
                },
                "security": [
                    {
                        "passport": []
                    }
                ]
            }
        },
        "/v1/trade/get": {
            "post": {
                "tags": [
                    "Books"
                ],
                "summary": "Get trade by trade hash",
                "description": "Returns a trade by the hash. ",
                "operationId": "getTradeByHash",
                "responses": {
                    "200": {
                        "description": "Successful operation",
                        "content": {
                            "application/json": {}
                        }
                    },
                    "401": {
                        "description": "Unauthenticated"
                    },
                    "403": {
                        "description": "Forbidden"
                    },
                    "400": {
                        "description": "Bad Request"
                    },
                    "404": {
                        "description": "not found"
                    }
                },
                "parameters" :[
                    {
                        "name": "trade_hash",
                        "in": "query",
                        "required": true,
                        "schema": {
                            "type": "string"
                        },
                        "description": "A hash (ID) of the trade."
                    }
                ]
            }
        },
        "/v1/trade/start": {
            "post": {
                "tags": [
                    "Books"
                ],
                "summary": "Start trade",
                "description": "Start trade",
                "operationId": "startTrade",
                "responses": {
                    "200": {
                        "description": "Successful operation",
                        "content": {
                            "application/json": {}
                        }
                    },
                    "401": {
                        "description": "Unauthenticated"
                    },
                    "403": {
                        "description": "Forbidden"
                    },
                    "400": {
                        "description": "Bad Request"
                    },
                    "404": {
                        "description": "not found"
                    }
                },
                "parameters" :[
                    {
                        "name": "offer_hash",
                        "in": "query",
                        "required": true,
                        "schema": {
                            "type": "string"
                        },
                        "description": "A hash (ID) of an offer."
                    },
                    {
                        "name": "crypto_amount",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "type": "string"
                        },
                        "description": "Trade amount in cryptocurrency. For BTC trade in Satoshi, for ETH trade in GWEI, for USDT trade in micro cents (e.g 1 usdt = 1000000 micro cents)."
                    },
                    {
                        "name": "fiat",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "type": "string"
                        },
                        "description": "Trade amount in fiat currency."
                    },
                    {
                        "name": "bank_accounts[to]",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "type": "string"
                        },
                        "description": "Bank accounts that will be used for a given trade."
                    }
                ]
            }
        },
        "/v1/trade/completed": {
            "post": {
                "tags": [
                    "Books"
                ],
                "summary": "Fetch completed trade",
                "description": "Fetches completed trade",
                "operationId": "fetchCompletedTrade",
                "responses": {
                    "200": {
                        "description": "Successful operation",
                        "content": {
                            "application/json": {}
                        }
                    },
                    "401": {
                        "description": "Unauthenticated"
                    },
                    "403": {
                        "description": "Forbidden"
                    },
                    "400": {
                        "description": "Bad Request"
                    },
                    "404": {
                        "description": "not found"
                    }
                },
                "parameters" :[
                    {
                        "name": "page_number",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "type": "integer"
                        },
                        "description": ""
                    },
                    {
                        "name": "partner",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "type": "string"
                        },
                        "description": "Username of a partner."
                    }
                ]
            }
        },
        "/v1/offer/all": {
            "post": {
                "tags": [
                    "Books"
                ],
                "summary": "Get list of all available offers",
                "description": "Returns list of all offers. ",
                "operationId": "getOffers",
                "responses": {
                    "200": {
                        "description": "Successful operation",
                        "content": {
                            "application/json": {}
                        }
                    },
                    "401": {
                        "description": "Unauthenticated"
                    },
                    "403": {
                        "description": "Forbidden"
                    },
                    "400": {
                        "description": "Bad Request"
                    },
                    "404": {
                        "description": "not found"
                    }
                },
                "parameters" :[
                    {
                        "name": "offer_type",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "type": "string",
                            "enum": ["sell", "buy"]
                        },
                        "description": "If you would like to get offers that you can use <b>to buy crypto</b>, and you need to see offers <b>where other vendors are selling crypto</b>,  you should specify 'buy' to get 'sell' offers and vice versa."
                    },
                    {
                        "name": "type",
                        "in": "query",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "enum": ["sell", "buy"]
                        },
                        "description" : "Will return offers of given type without applying a domain logic that 'offer_type' filter has. If you specify 'sell' then offers with this type will be returned and so on. See also offer_type filter. Either 'offer_type' or 'type' filter needs to be provided. If 'offer_type' filter is provided then this filter will be ignored. Possible values: 'buy', 'sell'."
                    },
                    {
                        "name": "limit",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "type": "integer"
                        },
                        "description" : "How many offers to return."
                    },
                    {
                        "name": "page_number",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "type": "integer"
                        },
                        "description" : ""
                    },
                    {
                        "name": "payment_method",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "type": "string"
                        },
                        "description" : "paypal/bank-transfer/moneygram/amazon-gift-card"
                    },
                    {
                        "name": "currency_code",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "type": "string"
                        },
                        "description" : "3 letter ISO code for fiat currency. 'USD' or any other. Case insensitive."
                    }
                ],
                "security": [
                    {
                        "passport": []
                    }
                ]
            }
        },
        "/v1/offer": {
            "post": {
                "tags": [
                    "Books"
                ],
                "summary": "Get list of an offer",
                "description": "Returns list of an offer. ",
                "operationId": "getOfferById",
                "responses": {
                    "200": {
                        "description": "Successful operation",
                        "content": {
                            "application/json": {}
                        }
                    },
                    "401": {
                        "description": "Unauthenticated"
                    },
                    "403": {
                        "description": "Forbidden"
                    },
                    "400": {
                        "description": "Bad Request"
                    },
                    "404": {
                        "description": "not found"
                    }
                },
                "parameters" :[
                    {
                        "name": "offer_hash",
                        "in": "query",
                        "required": true,
                        "schema": {
                            "type": "string"
                        },
                        "description": "A hash (ID) of the offer."
                    }
                ]
            }
        },
        "/v1/offer/create": {
            "post": {
                "tags": [
                    "Books"
                ],
                "summary": "Create offer",
                "description": "Creates an offer. ",
                "operationId": "createOffer",
                "responses": {
                    "200": {
                        "description": "Successful operation",
                        "content": {
                            "application/json": {}
                        }
                    },
                    "401": {
                        "description": "Unauthenticated"
                    },
                    "403": {
                        "description": "Forbidden"
                    },
                    "400": {
                        "description": "Bad Request"
                    },
                    "404": {
                        "description": "not found"
                    }
                },
                "parameters" :[
                    {
                        "name": "offer_type_field",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "type": "string"
                        },
                        "description": "An offer type. Possible values: 'buy', 'sell'."
                    },
                    {
                        "name": "currency",
                        "in": "query",
                        "required": true,
                        "schema": {
                            "type": "string"
                        },
                        "description" : "3 letter ISO code for fiat currency. 'USD' or any other. Case insensitive."
                    },
                    {
                        "name": "payment_method",
                        "in": "query",
                        "required": true,
                        "schema": {
                            "type": "string"
                        },
                        "description" : "paypal/bank-transfer/moneygram/amazon-gift-card"
                    },
                    {
                        "name": "margin",
                        "in": "query",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        },
                        "description" : "A percent that determines differences between market price and the price of the offer."
                    },
                    {
                        "name": "range_min",
                        "in": "query",
                        "required": true,
                        "schema": {
                            "type": "integer",
                            "minimum": 10
                        },
                        "description" : "A minimum value of the trade limit, i.e the smallest amount of fiat that a trade can be started with."
                    },
                    {
                        "name": "range_max",
                        "in": "query",
                        "required": true,
                        "schema": {
                            "type": "integer",
                            "minimum": 10
                        },
                        "description" : "A maximum value of the trade limit, i.e the largest amount of fiat that a trade can be started with."
                    },
                    {
                        "name": "payment_window",
                        "in": "query",
                        "required": true,
                        "schema": {
                            "type": "integer",
                            "minimum": 30,
                            "maximum" : 43200
                        },
                        "description" : "How much time the trade partner has to make the payment and click 'Paid' before the trade is automatically canceled. Integer between 30 to 43200."
                    },
                    {
                        "name": "offer_terms",
                        "in": "query",
                        "required": true,
                        "schema": {
                            "type": "string"
                        },
                        "description" : "Terms of the offer for a trade partner. String up to 2500 characters."
                    },
                    {
                        "name": "trade_details",
                        "in": "query",
                        "required": true,
                        "schema": {
                            "type": "string"
                        },
                        "description" : "Instructions for a trade partner. String up to 2500 characters."
                    },
                    {
                        "name": "crypto_currency",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "type": "string"
                        },
                        "description" : "e.g - btc, eth. If not set, then 'btc' will be used as a default."
                    }

                    
                ],
                "security": [
                    {
                        "passport": []
                    }
                ]
            }
        }
        ,
        "/v1/offer/created/list": {
            "post": {
                "tags": [
                    "Books"
                ],
                "summary": "Offers created",
                "description": "List created offers. ",
                "operationId": "listCreatesOffer",
                "responses": {
                    "200": {
                        "description": "Successful operation",
                        "content": {
                            "application/json": {}
                        }
                    },
                    "401": {
                        "description": "Unauthenticated"
                    },
                    "403": {
                        "description": "Forbidden"
                    },
                    "400": {
                        "description": "Bad Request"
                    },
                    "404": {
                        "description": "not found"
                    }
                },
                "parameters" :[
                    {
                        "name": "offer_type",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "type": "string",
                            "enum": ["sell", "buy"]
                        },
                        "description": "An offer type. "
                    },
                    {
                        "name": "active",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "type": "string",
                            "enum": ["false", "true"]
                        },
                        "description" : "A filter by active/not active offers, by default all offers are displayed."
                    }                    
                ],
                "security": [
                    {
                        "passport": []
                    }
                ]
            }
        }
    },
    "components": {
        "schemas": {
            "login": {
                "properties": {
                    "created_at": {
                        "description": "Initial creation timestamp",
                        "type": "string",
                        "format": "date-time",
                        "readOnly": "true"
                    },
                    "updated_at": {
                        "description": "Last update timestamp",
                        "type": "string",
                        "format": "date-time",
                        "readOnly": "true"
                    },
                    "deleted_at": {
                        "description": "Soft delete timestamp",
                        "type": "string",
                        "format": "date-time",
                        "readOnly": "true"
                    }
                },
                "type": "object"
            }
        }
    },
    "security": [
        []
    ]
}